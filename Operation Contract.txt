1. startGame()
유스케이스: Start Game
사전조건: 프로그램이 실행됨
사후조건: UI 선택 화면으로 진입

주요 흐름:
사용자가 시스템 실행 후 “게임 시작” 선택
시스템이 초기화 루틴을 실행하고 다음 화면으로 이동

2. selectUI(mode)
유스케이스: Select UI
사전조건: 게임이 시작된 상태
사후조건: 선택한 UI(Swing/JavaFX)가 로드됨

주요 흐름:
시스템이 UI 목록을 제시
사용자가 원하는 모드를 선택
시스템이 해당 UI 모듈을 로딩

3. selectBoardLayout(layoutType)
유스케이스: Select Board Layout
사전조건: UI가 설정됨
사후조건: 선택된 보드 레이아웃이 게임에 적용됨

주요 흐름:
시스템이 보드 레이아웃 목록을 보여줌
사용자가 하나를 선택
시스템이 선택값을 저장하고 해당 보드를 준비함

4. setupParticipants(playerNum, pieceNum)
유스케이스: Set Participants & Pieces
사전조건: 보드가 설정됨
사후조건: 참가자 수, 이름, 색상, 말 개수 등이 등록됨

주요 흐름:
시스템이 인원수 및 이름 입력을 요구
사용자가 정보 입력
시스템이 각 플레이어와 말(Token) 초기화

예외 흐름:
사용자가 적절한 값[참가자(2~4 사이의 값), 말(2~5 사이의 값)]을 선택하지 않으면 다시 입력받음

5. throwYut(player)
유스케이스: Throw Yut

사전조건: 현재 플레이어의 턴이며, 게임이 종료되지 않음
사후조건: 도/개/걸/윷/모 중 하나의 결과 생성

주요 흐름:
플레이어가 윷 던지기 요청
시스템이 무작위 결과를 생성
해당 결과가 사용자에게 표시되고 저장됨

6. movePiece(yutResult, piece)
유스케이스: Move Piece

사전조건: 플레이어가 윷 결과를 얻고 말을 선택함
사후조건: 말이 이동하고 다음 상태(잡기, 묶기, 종료 등)가 처리됨

주요 흐름:
시스템이 선택된 말과 윷 값을 바탕으로 이동 경로 계산
이동 중 도착지에 따라 잡기/묶기/종료 등 처리
UI에 반영됨

예외 흐름:
아무 말도 출발하지 않았을 때 빽도가 나오면 piece를 move하지 않고 종료처리.

7. checkExtraTurn(result)
유스케이스: Extra Turn

사전조건: 윷 결과가 존재함
사후조건: 윷 또는 모인 경우 extraTurn 값 증가

주요 흐름:
시스템이 결과를 확인
윷 또는 모일 경우 extraTurn += 1
그 외는 다음 턴으로 넘어갈 준비

8. checkGameEnd()
유스케이스: End Game

사전조건: 말 이동 이후
사후조건: 모든 말이 도착하면 게임 종료됨

주요 흐름:
시스템이 현재 플레이어의 말 상태를 모두 확인
모든 말이 도착 상태라면 승리 처리
종료 화면 출력